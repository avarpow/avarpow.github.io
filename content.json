{"pages":[{"title":"","permalink":"http://keyin.me/Calculator/index.html","text":"A Simple Caculator budeli ON/OFF 7 8 9 / 4 5 6 * 1 2 3 - 0 . ← + ( ) CE ="},{"title":"","permalink":"http://keyin.me/Calculator/main.js","text":"var s = \"\"; var open = false; function display_expression() { document.getElementById(\"expression\").value=s; } function clear_result() { document.getElementById(\"result\").value=\"\"; } function on() { s = \"\"; display_expression(); if (!open) document.getElementById(\"result\").value = \"0\"; else clear_result(); open = !open; } function equal_click() { document.getElementById('equal').focus(); s=document.getElementById(\"expression\").value; try { var t = eval(s); if (t == undefined) { clear_result(); alert(\"计算式为空\"); } else document.getElementById(\"result\").value = t; } catch{ alert(\"计算式无法执行\"); } } document.onkeydown=function(event){ var e = event || window.event || arguments.callee.caller.arguments[0]; if (e && e.keyCode == 13) { focus(document.getElementById(\"equal\")); equal_click(); } if (e && e.keyCode == 8) { withdraw(); } }; function num0_click() { if (open){ s = s + 0; display_expression(); } } function num1_click() { if (open) { s = s + 1; display_expression(); } } function num2_click() { if (open) { s = s + 2; display_expression(); } } function num3_click() { if (open) { s = s + 3; display_expression(); } } function num4_click() { if (open) { s = s + 4; display_expression(); } } function num5_click() { if (open) { s = s + 5; display_expression(); } } function num6_click() { if (open) { s = s + 6; display_expression(); } } function num7_click() { if (open) { s = s + 7; display_expression(); } } function num8_click() { if (open) { s = s + 8; display_expression(); } } function num9_click() { if (open) { s = s + 9; display_expression(); } } function num0_click() { if (open) { s = s + 0; display_expression(); } } function plus_click() { if (open) { s = s + \"+\"; display_expression(); } } function multiply_click() { if (open) { s = s + \"*\"; display_expression(); } } function subduction_click() { if (open) { s = s + \"-\"; display_expression(); } } function point_click() { if (open) { s = s + \".\"; display_expression(); } } function left_bracket_click() { if (open) { s = s + \"(\"; display_expression(); } } function right_bracket_click() { if (open) { s = s + \")\"; display_expression(); } } function CE_click() { if (open) { s = \"\"; document.getElementById(\"result\").value = \"0\"; display_expression(); } } function division_click() { if (open) { s = s + \"/\"; display_expression(); } } function withdraw() { if (open) { s = s.substr(0, s.length - 1); display_expression(); } }"},{"title":"","permalink":"http://keyin.me/Calculator/style.css","text":"#framework{ margin: auto; font-size: 0; border-width: 2px 2px 20px 2px; border-style: solid; border-color: gray; border-bottom-color: rgb(100,100,100); background-color: grey; border-radius: 2%; height: 740px; width: 620px; } #result,#expression{ width: 98%; height:50px; background-color: #D4DED6; border-width: 0 5px; text-align: right; color: #000000; border-radius: 20px 20px 0 0; font-size: 40px; font-weight: bold; } #expression{ margin-top: 20px; margin: auto; margin-bottom: 0; border-radius: 20px 20px 0 0; } #result{ margin: auto; border-radius: 0 0 20px 20px ; } .layel{ height: 105px; width: 90%; margin: auto; } button{ position: relative; top:0px; outline:none; width: 25%; color: rgba(65,105,225,0.8);; height: 120px; font-size: 80px; font-weight: bold; border-radius: 50%;; border-style: solid; border-width: 2px 1px 20px 1px; border-color: rgba(0,0,0,1) rgba(0,0,0,1) rgba(150,150,150,1) rgba(0,0,0,1); transition-duration: 0.2s ; transition-timing-function: ease; } button:hover{ position: relative; top:-20px; } #solor{ height: 70px; } #solor img{ position: relative; display: inline !important; left:50px; top:5px; height:60px; } #solor span{ position: relative; left:70px; font-size: 50px; font-weight: bolder; font-family: Arial, Helvetica, sans-serif; top:0px; } #solor button span{ position: relative; font-size: 23px; left:2px; top:0px; } button:active{ position: relative; top:-5px; background-color: rgb(150,150,150); border-bottom-color: rgb(100,100,100); } #solor button { width: 130px; height:50px; border-radius: 50%; background-color: #0F939E; color:#E9FEFC; position: relative;; top:-15px; left:130px; font-size: 20px; text-align: center; border-width: 1px 1px 7px 1px; } #solor button:active{ position: relative; top:-10px; }"}],"posts":[{"title":"web_hw5","permalink":"http://keyin.me/2019/10/12/web-hw5/","text":"作业要求 -&gt;最终效果&lt;- 三个小时打完作业，然而出现谜之bug： 如果在使用键盘enter键得出答案之前采用鼠标点击过按钮，则按enter键后会在运算式中重复输入最后一个字符 后发现是焦点问题使用enter相当于触发一次焦点上的按钮。 在键盘点击后加入 1document.getElementById(&apos;equal&apos;).focus(); 在enter时候将焦点设置为equal键上解决"},{"title":"程设写迷惑代码第二周","permalink":"http://keyin.me/2019/09/25/strang-code2/","text":"第二周又来写迷惑代码啦 一行迷惑的不能再迷惑的代码 1234567#include&lt;stdio.h&gt;int main()&#123; int y,m,md=0,temp,flag=0; scanf(&quot;%d%d&quot;,&amp;y,&amp;m); (y&gt;=0&amp;&amp;y&lt;=9999&amp;&amp;m&gt;=1&amp;&amp;m&lt;=12)?printf(&quot;%04d/%02d has %d days.\\n&quot;,y,m,m==2?((y%100==0?(y%400==0?1:0):(y%4==0?1:0))==1?29:28):((m*2-15)&gt;0?(m*2-15):(15-m*2))%4==1?31:30):printf(&quot;Invalid Input Detected.\\n&quot;);&#125; 1234567#include &lt;stdio.h&gt;int main()&#123; char c; scanf(&quot;%c&quot;, &amp;c); printf(&quot;%c\\n&quot;, c - &apos;A&apos; + &apos;a&apos;);&#125; 1234567#include &lt;stdio.h&gt;int main()&#123; int num1, num2; scanf(&quot;%d%d&quot;, &amp;num1, &amp;num2); printf(&quot;%d\\n&quot;,num1%num2==0?num1+num2:num1);&#125; 1234567#include &lt;stdio.h&gt;int main()&#123; int n, flag = 0; scanf(&quot;%d&quot;, &amp;n); printf(&quot;%d is%s a leap year.\\n&quot;, n, (n % 100==0 ? (n % 400==0 ? 1 : 0 ): (n % 4==0 ? 1 : 0)) ? &quot;&quot; : &quot; not&quot;);&#125; 啊，你说社么if？不存在的:不存在的;"},{"title":"程设写迷惑代码第一天","permalink":"http://keyin.me/2019/09/18/程设写迷惑代码第一天/","text":"突然找到了写毒瘤代码的快感XDDDD: Descrption 输出 hello, world 别忘了换行哦 _ 毒瘤代码一 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include&lt;stdio.h&gt;int main()&#123; char s[13]; for(int i=0;i&lt;13;i++)&#123; if(i==0)&#123; int j=0; while(j&lt;104)&#123; j++; &#125; s[i]=j; &#125; if(i==1)&#123; int j=0; while(j&lt;101)&#123; j++; &#125; s[i]=j; &#125; if(i==2)&#123; int j=0; while(j&lt;108)&#123; j++; &#125; s[i]=j; &#125; if(i==3)&#123; int j=0; while(j&lt;108)&#123; j++; &#125; s[i]=j; &#125; if(i==4)&#123; int j=0; while(j&lt;111)&#123; j++; &#125; s[i]=j; &#125; if(i==5)&#123; int j=0; while(j&lt;44)&#123; j++; &#125; s[i]=j; &#125; if(i==6)&#123; int j=0; while(j&lt;32)&#123; j++; &#125; s[i]=j; &#125; if(i==7)&#123; int j=0; while(j&lt;119)&#123; j++; &#125; s[i]=j; &#125; if(i==8)&#123; int j=0; while(j&lt;111)&#123; j++; &#125; s[i]=j; &#125; if(i==9)&#123; int j=0; while(j&lt;114)&#123; j++; &#125; s[i]=j; &#125; if(i==10)&#123; int j=0; while(j&lt;108)&#123; j++; &#125; s[i]=j; &#125; if(i==11)&#123; int j=0; while(j&lt;100)&#123; j++; &#125; s[i]=j; &#125; if(i==12)&#123; int j=0; while(j&lt;&apos;\\n&apos;)&#123; j++; &#125; s[i]=j; &#125; if(i==13)&#123; int j=0; while(j&lt;0)&#123; j++; &#125; s[i]=j; &#125; &#125; printf(&quot;%s&quot;,s); return 0;&#125; 然而并没有逃过matrix的法眼 Description 计算两个整数a，b的和，整数范围为-1000&lt;a,b&lt;1000。 毒瘤代码二 123456789#include&lt;stdio.h&gt;int main()&#123; int a,b; scanf(&quot;%d&quot;,&amp;a); scanf(&quot;%d&quot;,&amp;b); printf(&quot;%d\\n&quot;,a^a^a^a^a^a^a^a^a-a-a-a-a+a+a+a+a+b^b^b^b^b-b-b-b-b+b+b+b+b); return 0;&#125; Description In one week an employee works h hours (h is an integer and 0&lt;h&lt;168) at the hourly pay rate of 24.75 dollar. Assume a 40.0 hour normal work week and an overtime pay rate factor of 1.5. What are the employee’s wages? 毒瘤代码三 123456#include &lt;stdio.h&gt;int main()&#123; int hours=0; scanf(&quot;%d&quot;,&amp;hours); printf(&quot;%.2f\\n&quot;, 24.75 * hours + (hours &gt; 40 ? 0.5f*24.75*(hours-40):0.0));&#125; Description Write a program that reads in the radius and length of a cylinder and computes volume using the following formulas: area = radius * radius * PI volume = area * length PI = 3.14159 毒瘤代码四 12345678#include &lt;stdio.h&gt;int main()&#123; double pi = 2,now=2.0/3,r,l; scanf(&quot;%lf%lf&quot;,&amp;r,&amp;l); for (int i = 1; i &lt; 30;pi = pi + now,now = now * (i + 1) / ((2 * (i + 1)) + 1),i++); printf(&quot;%.4lf&quot;,pi*r*r*l); return 0;&#125; 照这样写代码被打死可不要怪我。"},{"title":"服务器修复系统&ftp记","permalink":"http://keyin.me/2019/09/16/repair-ftp-sever/","text":"自闭两小时=一篇博文 9月11日感谢hz大佬出给我一台fx8300+hd7770嘿嘿 并不熟练地搭建ftp，nginx，和teamviewer。 结果正常运行两天后 多次重启无效，电脑开着开着引导就不见了？？？？ 接下来长时间重装系统 1.装完系统显卡只有DP有输出，HDMI无输出，且OW只有10帧，经排查是显卡驱动没有安装，多方查找驱动，最后还是靠360流氓软件才装好。 2.ping不通，关闭公网防火墙后解决 3.ftp方面选择 file zilla sever，结果发现长期无法连接服务器控制端。但是已经存在的用户可以正常访问。排查发现ftp zilla服务未开启。 4.其他电脑但是采用windows文件资源管理提示找不到元素，且无法弹出用户名和密码的登录界面，万能的百度有解决方案"},{"title":"有服务器啦","permalink":"http://keyin.me/2019/09/12/有服务器啦/","text":"捡了台FX8300+HD7770当服务器，我也终于有服务器了 电费+30 理智+30 肝脏-30 顺便在南实验楼测一下速度 百兆都没有，枯了 经过推荐用上了Mouse without board 好用，可惜鼠标有点点卡顿，如果做到teamviewer那样就好了"},{"title":"ip-tunnel技术","permalink":"http://keyin.me/2019/08/27/ip-tunnel技术/","text":"穿透内网，连接动态ip，内网ip打洞-----p2p实现原理 来源：https://blog.csdn.net/zhngcho/article/details/82907846 （1）问题的由来： 大部分的电脑上网都是用动态ip地址。内网的ip是由net（路由、网关）分配的，net发出去的时候，映射到一个公网地址，这是一个动态计算的过程（特别是端口号），因此称为动态ip地址。外部网是无法直接访问内网计算机的，但在大部分情况下，借助一台有公网ip地址电脑（这里叫服务器），通过某种方式，可以实现连接，这种技术较“打洞”。 如图： 有一个私有网络192.168.0.2，client a是其中的一台计算机，这个网络的网关natA（一个nat设备）的外网ip是202.103.142.29(应该还有一个内网的ip地址，比如10.0.0.10)。如果client a中的某个进程（这个进程创建了一个socket,这个socket绑定1234端口）想访问外网主机129.208.12.38的2000端口，那么当数据包通过nat时会发生什么事情呢？ 先nat会改变这个数据包的原ip地址，改为202.103.142.29。接着nat会为这个传输创建一个session（session是一个抽象的概念，如果是tcp，也许session是由一个syn包开始，以一个fin包结束。而udp呢，以这个ip的这个端口的第一个udp开始，结束不确定，也许是几分钟，也许是几小时，这要看具体的实现了）并且给这个session分配一个端口，比如62000，然后改变这个数据包的源端口为62000。所以本来是 1192.168.0.2:1234-&gt;129.208.12.38:2000 的数据包到了互联网上变为了 1202.103.142.29:62000-&gt;129.208.12.38:2000 一旦nat创建了一个session后，nat会记住62000端口对应的是192.168.0.2的1234端口，以后从129.208.12.38发送到62000端口的数据会被nat自动的转发到192.168.0.2上。（注意：这里是说129.208.12.38发送到62000端口的数据会被转发，其他的ip发送到这个端口的数据将被nat抛弃，这就是真正头痛的问题）这样client a就与server s1建立以了一个连接。 如果client a的原来那个socket(绑定了1234端口的那个udp socket)又接着向另外一个服务器server s2发送了一个udp包，那么这个udp包在通过nat时会怎么样呢？ 答案是net决定的，不同的net有不同的答案。 这里需要介绍一下NAT的类型： NAT设备的类型对于TCP穿越NAT,有着十分重要的影响,根据端口映射方式,NAT可分为如下4类,前3种NAT类型可统称为cone类型。 (1)全克隆( Full Cone) : NAT把所有来自相同内部IP地址和端口的请求映射到相同的外部IP地址和端口。任何一个外部主机均可通过该映射发送IP包到该内部主机。 (2)限制性克隆(Restricted Cone) : NAT把所有来自相同内部IP地址和端口的请求映射到相同的外部IP地址和端口。但是,只有当内部主机先给IP地址为X的外部主机发送IP包,该外部主机才能向该内部主机发送IP包。 (3)端口限制性克隆( Port Restricted Cone) :端口限制性克隆与限制性克隆类似,只是多了端口号的限制,即只有内部主机先向IP地址为X,端口号为P的外部主机发送1个IP包,该外部主机才能够把源端口号为P的IP包发送给该内部主机。 (4)对称式NAT ( Symmetric NAT) :这种类型的NAT与上述3种类型的不同,在于当同一内部主机使用相同的端口与不同地址的外部主机进行通信时, NAT对该内部主机的映射会有所不同。对称式NAT不保证所有会话中的私有地址和公开IP之间绑定的一致性。相反,它为每个新的会话分配一个新的端口号。 第一种最为理想，基本就是无需打洞； 第四种最糟糕，根本就不能打洞。好消息就是这种net基本没有，很少。 所以关键是第二和第三种net类型。 因此打洞的本质就是利用net的特性“只有当内部主机先给IP地址为X的外部主机发送IP包,该外部主机才能向该内部主机发送IP包” （3）实现步骤（各个实现可能都不一样） 我们先假设一下：有一个服务器S在公网上有一个IP，两个私网分别由NAT-A和NAT-B连接到公网，NAT-A后面有一台客户端A，NAT-B 后面有一台客户端B，现在，我们需要借助S将A和B建立直接的TCP连接，即由B向A打一个洞，让A可以沿这个洞直接连接到B主机，就好像NAT-B不存在一样。 实现过程如下： 1、 S启动两个网络侦听，一个叫【主连接】侦听，一个叫【协助打洞】的侦听。 2、 A和B分别与S的【主连接】保持联系。 3、 当A需要和B建立直接的TCP连接时，首先连接S的【协助打洞】端口，并发送协助连接申请。同时在该端口号上启动侦听（保证net类型3也能成功）。注意由于要在相同的网络终端上绑定到不同的套接字上，所以必须为这些套接字设置 SO_REUSEADDR 属性（即允许重用），否则侦听会失败。 4、 S的【协助打洞】连接收到A的申请后通过【主连接】通知B，并将A经过NAT-A转换后的公网IP地址和端口等信息告诉B。 5、 B收到S的连接通知后首先与S的【协助打洞】端口连接，随便发送一些数据后立即断开，这样做的目的是让S能知道B经过NAT-B转换后的公网IP和端口号。 6、 B尝试与A的经过NAT-A转换后的公网IP地址和端口进行connect（这就是所谓“打洞”），根据不同的路由器会有不同的结果，有些路由器在这个操作就能建立连接（例如我用的TPLink R402），大多数路由器对于不请自到的SYN请求包直接丢弃而导致connect失败，但NAT-A会纪录此次连接的源地址和端口号，为接下来真正的连接做好了准备，这就是所谓的打洞，即B向A打了一个洞，下次A就能直接连接到B刚才使用的端口号了。 7、 客户端B打洞的同时在相同的端口上启动侦听。B在一切准备就绪以后通过与S的【主连接】回复消息“我已经准备好”，S在收到以后将B经过NAT-B转换后的公网IP和端口号告诉给A。 8、 A收到S回复的B的公网IP和端口号等信息以后，开始连接到B公网IP和端口号，由于在步骤6中B曾经尝试连接过A的公网IP地址和端口，NAT-A纪录 了此次连接的信息，所以当A主动连接B时，NAT-B会认为是合法的SYN数据，并允许通过，从而直接的TCP连接建立起来了。 （4）让内网主机做服务器 以上的应用主要在于做p2p软件，如果我们想用家里的电脑，做服务器，是不需要这项技术（“打洞”）的，应为我们可以把路由器设置为net1型，可以直接设置端口映射： 但还是需要一个外网固定ip的服务器来负责通知其他客服端，因为拨号时得到的ip（这其实也是外网ip，就是其他的计算机可以直接访问你的）每次还是变化的。"},{"title":"上课摸鱼","permalink":"http://keyin.me/2019/08/27/上课摸鱼/","text":"上课被推送了个UGATIT就沉迷其中了23333. 现在无监督学习和GAN真火 StyleGAN和BigGAN都好强 上课第一天顺便蹭课了数分,计组和Web Web老师很强的样子，第一节课就把萌新吓得半死。"},{"title":"一次失败的建模","permalink":"http://keyin.me/2019/08/20/一次失败的建模/","text":"尝试解决高中时困扰了很久的三角洲式3d打印机控制方法，结果建模一个小时发现结构设计是错的。。。 （自由度不够了） 本着“自己解决不了的东西就交给别人解决”，查阅文献一篇 文中的球形铰和虎克铰是什么鬼啊。。。。。。 hook joint 直接用音译感觉很别扭 12参考文献[1]周培,黄天宇.一种并联式3D打印机的设计与制造[J].科技通报,2017,33(09):89-91."},{"title":"dp问题","permalink":"http://keyin.me/2019/08/02/线性dp/","text":"概念 最优子结构 对于多阶段决策问题，如果每一个阶段的最优决策序列的子序列也是最优的，且决策序列具有“无后效性”，就可以将此决策方法理解为最优子结构。 第二数学归纳法 第二数学归纳法原理是设有一个与正整数n有关的命题，如果： （1）当n=1，2时，命题成立； （2）假设当n≤k（k∈N）时，命题成立，由此可推得当n=k+1时，命题也成立。 那么根据①②可得，命题对于一切正整数n来说都成立。 最长递(递减)序列 从一边开始，将端点确定为最优解，再向另一端刷新，类似第二数学归纳法。 和时间有关的dp 时间可逆，可以考虑从后向前dp 背包问题 背包问题指一类各个事件之间相互独立，每种事件有不同的状态可以选择，按照事件的状态dp。 有01背包，完全背包，有限背包，有依赖背包，树形背包等。 参考背包问题"},{"title":"添加公式失败记","permalink":"http://keyin.me/2019/07/29/添加公式失败记/","text":"添加支持公式显示，卸载marked渲染器，安装markdown it plus渲染器 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-markdown-it-plus --save 配置中添加 12345678910111213141516markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ plugins: - plugin: name: markdown-it-katex enable: true - plugin: name: markdown-it-mark enable: false html头部添加css，或模板文件中 1&lt;link href=&quot;https://cdn.bootcss.com/KaTeX/0.7.1/katex.min.css&quot; rel=&quot;stylesheet&quot;&gt; 完成后渲染测试 然而实际情况如下 对比vscode插件的显示效果 一言难尽… 暂时还是用截图替代好了 以后有需求再改用支持mathjax渲染器"},{"title":"添加gitalk的艰难历程","permalink":"http://keyin.me/2019/07/27/添加gitalk功能艰难历程/","text":"00:26 不蒜子的网页浏览量工具不错 添加一下 01:10 还算顺利地完成了 01:12 网上冲浪发现给gitalk的评论工具不错 02:04 跟着教程走,注册了github application,本地gitalk显示not found,可能推到git上可能就正常了吧 02:06 然而并不正常,一个一个翻issue查找解决方法 02:30 原来html里面的&lt;% %&gt;还有动态语言替换的功能,应该是这里错了 02:54 修改了还是不行,但是authorize打开的url好像有点不对劲 03:10 是动态替换没改,改了试一试 03:15 还是not found删掉这些东西试一试 03:25 为什么删掉了,再generate还存在？ 03:30 是没有clean保留的缓存文件,clean之后再generate就可了 03:36 动态语言的替换加上逻辑判断的过程不懂,去掉逻辑判断 03:42 不动态引用了,直接写死,我就不信还不行了 03:48 可以了,wtmnb 总之gitalk装载成功,但是仍然不懂项目中yaml文件中的参数如何引用,逻辑判断到底是否生效,怎么运用动态替换语言"},{"title":"npm安装","permalink":"http://keyin.me/2019/07/26/npm安装/","text":"在构建hexo博客的过程中，需要用到npm包，与python模块安装后全局可用不同，npm包分为本地包(当前项目可用)，全局包(命令行中直接用) ##如何安装本地包 12cd到需要安装包的目录执行npm install &lt;package_name&gt; ##如何安装全局包 如果你想将其作为一个命令行工具，那么你应该将其安装到全局。这种安装方式后可以让你在任何目录下使用这个包。比如 grunt 就应该以这种方式安装。 1执行npm install -g &lt;package_name&gt;"},{"title":"Hello World","permalink":"http://keyin.me/2019/07/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment"}]}